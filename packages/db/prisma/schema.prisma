generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Allocations {
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  user_id    String    @db.Uuid
  project_id String    @db.Uuid
  start_date DateTime  @default(now()) @db.Timestamp(6)
  end_date   DateTime? @db.Timestamp(6)
  percentage Int       @default(100) @db.SmallInt
  Projects   Projects  @relation(fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ALLOCATIONS_project_id_fkey")
  Users      Users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ALLOCATIONS_user_id_fkey")

  @@id([user_id, project_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Permits {
  created_at                       DateTime  @default(now()) @db.Timestamptz(6)
  user_id                          String    @db.Uuid
  duration                         Decimal   @db.Decimal
  id                               String    @id(map: "PERMITS_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description                      String?
  type                             String    @default("Holiday")
  start_date                       DateTime  @db.Timestamp(6)
  status                           String    @default("Waiting")
  reviewer_id                      String    @db.Uuid
  end_date                         DateTime? @db.Timestamp(6)
  Users_Permits_reviewer_idToUsers Users     @relation("Permits_reviewer_idToUsers", fields: [reviewer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "PERMITS_reviewer_id_fkey")
  Users_Permits_user_idToUsers     Users     @relation("Permits_user_idToUsers", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "PERMITS_user_id_fkey")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Projects {
  id          String        @id(map: "PROJECTS_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at  DateTime      @default(now()) @db.Timestamptz(6)
  name        String        @db.VarChar
  client      String        @db.VarChar
  description String?
  start_date  DateTime      @db.Timestamp(6)
  end_date    DateTime?     @db.Timestamp(6)
  status_id   String        @db.Uuid
  Allocations Allocations[]
  Statuses    Statuses      @relation(fields: [status_id], references: [id], onDelete: SetDefault, map: "PROJECTS_status_id_fkey")
  Timesheets  Timesheets[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Roles {
  id         String   @id(map: "ROLES_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(6)
  label      String   @db.VarChar
  Users      Users[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Statuses {
  id         String     @id(map: "STATUS_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime   @default(now()) @db.Timestamptz(6)
  name       String     @db.VarChar
  Projects   Projects[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Timesheets {
  id          BigInt   @id(map: "TIMESHEETS_pkey") @default(autoincrement())
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  date        DateTime @db.Date
  project_id  String   @db.Uuid
  user_id     String   @db.Uuid
  description String?  @db.VarChar
  Projects    Projects @relation(fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "TIMESHEETS_project_id_fkey")
  Users       Users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "TIMESHEETS_user_id_fkey")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Users {
  id                                 String        @id(map: "USERS_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at                         DateTime      @default(now()) @db.Timestamptz(6)
  email                              String        @unique(map: "USERS_email_key")
  name                               String
  avatar_url                         String?
  auth_id                            String?       @unique(map: "USERS_auth_id_key") @db.VarChar
  role_id                            String?       @db.Uuid
  Allocations                        Allocations[]
  Permits_Permits_reviewer_idToUsers Permits[]     @relation("Permits_reviewer_idToUsers")
  Permits_Permits_user_idToUsers     Permits[]     @relation("Permits_user_idToUsers")
  Timesheets                         Timesheets[]
  Roles                              Roles?        @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "USERS_role_id_fkey")
}
