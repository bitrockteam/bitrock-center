generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Allocations {
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  userId    String    @map("user_id") @db.Uuid
  projectId String    @map("project_id") @db.Uuid
  startDate DateTime  @default(now()) @map("start_date") @db.Timestamp(6)
  endDate   DateTime? @map("end_date") @db.Timestamp(6)
  percentage Int      @default(100) @db.SmallInt
  project   Projects  @relation(fields: [projectId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user      Users     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([userId, projectId])
  @@map("ALLOCATIONS")
}

model Permits {
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  userId      String   @map("user_id") @db.Uuid
  duration    Decimal  @db.Decimal
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?
  type        String   @default("Holiday")
  startDate   DateTime @map("start_date") @db.Timestamp(6)
  status      String   @default("Waiting")
  reviewerId  String   @map("reviewer_id") @db.Uuid
  endDate     DateTime? @map("end_date") @db.Timestamp(6)
  reviewer    Users    @relation("PERMITS_reviewer_idToUSERS", fields: [reviewerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user        Users    @relation("PERMITS_user_idToUSERS", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("PERMITS")
}

model Projects {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt   DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  name        String       @db.VarChar
  client      String       @db.VarChar
  description String?
  startDate   DateTime     @map("start_date") @db.Timestamp(6)
  endDate     DateTime?    @map("end_date") @db.Timestamp(6)
  statusId    String       @map("status_id") @db.Uuid
  allocations Allocations[]
  status      Statuses     @relation(fields: [statusId], references: [id], onDelete: SetDefault)
  timesheets  Timesheets[]

  @@map("PROJECTS")
}

model Roles {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  label      String   @db.VarChar
  users      Users[]

  @@map("ROLES")
}

model Statuses {
  id         String     @id(map: "STATUS_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt  DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  name       String     @db.VarChar
  projects   Projects[]

  @@map("STATUSES")
}

model Timesheets {
  id          BigInt   @id @default(autoincrement())
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  date        DateTime @db.Date
  projectId   String   @map("project_id") @db.Uuid
  userId      String   @map("user_id") @db.Uuid
  description String?  @db.VarChar
  project     Projects @relation(fields: [projectId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user        Users    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("TIMESHEETS")
}

model Users {
  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt  DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  email      String     @unique
  name       String
  avatarUrl  String?    @map("avatar_url")
  authId     String?    @unique @map("auth_id") @db.VarChar
  roleId     String?    @map("role_id") @db.Uuid
  allocations Allocations[]
  permitsAsReviewer Permits[] @relation("PERMITS_reviewer_idToUSERS")
  permitsAsUser     Permits[] @relation("PERMITS_user_idToUSERS")
  timesheets        Timesheets[]
  role              Roles?    @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("USERS")
}
