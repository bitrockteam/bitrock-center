generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model allocation {
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  user_id    String    @db.Uuid
  project_id String    @db.Uuid
  start_date DateTime  @default(now()) @db.Timestamp(6)
  end_date   DateTime? @db.Timestamp(6)
  percentage Int       @default(100) @db.SmallInt
  project    project   @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user       user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([user_id, project_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model permit {
  created_at                    DateTime     @default(now()) @db.Timestamptz(6)
  user_id                       String       @db.Uuid
  duration                      Int          @db.SmallInt
  id                            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description                   String?
  type                          PermitType
  date                          DateTime     @db.Date
  status                        PermitStatus
  reviewer_id                   String       @db.Uuid
  user_permit_reviewer_idTouser user         @relation("permit_reviewer_idTouser", fields: [reviewer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_permit_user_idTouser     user         @relation("permit_user_idTouser", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model project {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at  DateTime      @default(now()) @db.Timestamptz(6)
  name        String        @db.VarChar
  description String?
  start_date  DateTime      @db.Timestamp(6)
  end_date    DateTime?     @db.Timestamp(6)
  status      ProjectStatus @default(PLANNED)
  client_id   String        @db.Uuid
  allocation  allocation[]
  client      client        @relation(fields: [client_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_project_client")
  work_items  work_items[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model timesheet {
  created_at   DateTime   @default(now()) @db.Timestamptz(6)
  date         DateTime   @db.Date
  user_id      String     @db.Uuid
  description  String?    @db.VarChar
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  hours        Int        @db.SmallInt
  work_item_id String     @db.Uuid
  user         user       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  work_items   work_items @relation(fields: [work_item_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model user {
  id                                  String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at                          DateTime                  @default(now()) @db.Timestamptz(6)
  email                               String                    @unique
  name                                String
  avatar_url                          String?
  referent_id                         String?                   @db.Uuid
  role                                Role                      @default(Employee)
  allocation                          allocation[]
  chat_session                        chat_session[]
  contract_contract_employee_idTouser contract[]                @relation("contract_employee_idTouser")
  contract_contract_modified_byTouser contract[]                @relation("contract_modified_byTouser")
  development_plan                    development_plan[]
  permit_permit_reviewer_idTouser     permit[]                  @relation("permit_reviewer_idTouser")
  permit_permit_user_idTouser         permit[]                  @relation("permit_user_idTouser")
  timesheet                           timesheet[]
  user                                user?                     @relation("userTouser", fields: [referent_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_user                          user[]                    @relation("userTouser")
  user_permission                     user_permission[]
  user_roles                          user_roles[]
  user_skill                          user_skill[]
  work_item_enabled_users             work_item_enabled_users[]
}

model development_plan {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id      String   @db.Uuid
  created_date DateTime @db.Date
  user         user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  goal         goal[]
}

model goal {
  id                  String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  development_plan_id String           @db.Uuid
  title               String
  description         String
  development_plan    development_plan @relation(fields: [development_plan_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  todo_item           todo_item[]
}

model todo_item {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  goal_id   String  @db.Uuid
  text      String
  completed Boolean @default(false)
  goal      goal    @relation(fields: [goal_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model skill {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  category    SkillCategory
  description String?
  icon        String
  active      Boolean       @default(true)
  created_at  DateTime      @default(now()) @db.Timestamptz(6)
  updated_at  DateTime      @default(now()) @db.Timestamptz(6)
  user_skill  user_skill[]
}

model user_skill {
  user_id        String         @db.Uuid
  skill_id       String         @db.Uuid
  seniorityLevel SeniorityLevel
  skill          skill          @relation(fields: [skill_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user           user           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_id, skill_id])
}

model contract {
  id                              String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  employee_id                     String         @db.Uuid
  ral                             Int
  contract_type                   contracttype
  start_date                      DateTime       @db.Date
  end_date                        DateTime?      @db.Date
  working_hours                   workinghours
  remote_policy                   remotepolicy
  notes                           String?
  status                          contractstatus
  contract_visible_to_employee    Boolean        @default(true)
  last_modified                   DateTime       @default(now()) @db.Timestamptz(6)
  modified_by                     String         @db.Uuid
  user_contract_employee_idTouser user           @relation("contract_employee_idTouser", fields: [employee_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user_contract_modified_byTouser user           @relation("contract_modified_byTouser", fields: [modified_by], references: [id], onDelete: SetNull, onUpdate: NoAction)
}

model work_item_enabled_users {
  work_item_id String     @db.Uuid
  user_id      String     @db.Uuid
  user         user       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  work_items   work_items @relation(fields: [work_item_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([work_item_id, user_id])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model work_items {
  id                      String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title                   String                    @db.VarChar
  client_id               String                    @db.Uuid
  project_id              String?                   @db.Uuid
  type                    work_item_type
  start_date              DateTime                  @db.Date
  end_date                DateTime?                 @db.Date
  status                  work_item_status          @default(active)
  description             String?
  hourly_rate             Int?
  estimated_hours         Int?
  fixed_price             Int?
  created_at              DateTime?                 @default(now()) @db.Timestamptz(6)
  timesheet               timesheet[]
  work_item_enabled_users work_item_enabled_users[]
  client                  client                    @relation(fields: [client_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_work_items_client")
  project                 project?                  @relation(fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model client {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String       @db.VarChar
  code           String       @unique(map: "idx_client_code") @db.VarChar
  email          String       @db.VarChar
  phone          String?      @db.VarChar
  address        String?      @db.VarChar
  vat_number     String?      @db.VarChar
  contact_person String?      @db.VarChar
  status         ClientStatus @default(active)
  created_at     DateTime     @default(now()) @db.Timestamptz(6)
  notes          String?
  project        project[]
  work_items     work_items[]

  @@index([name], map: "idx_client_name")
}

model chat_session {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id      String    @db.Uuid
  title        String
  last_message String?
  last_updated DateTime  @default(now()) @db.Timestamptz(6)
  user         user      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  message      message[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model message {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  chat_session_id String       @db.Uuid
  type            String
  content         String
  timestamp       DateTime     @default(now()) @db.Timestamptz(6)
  is_json         Boolean?     @default(false)
  json_data       Json?
  confirmed       Boolean?
  chat_session    chat_session @relation(fields: [chat_session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([chat_session_id], map: "idx_message_chat_session_id")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model permission {
  id          Permissions @id
  created_at  DateTime    @default(now()) @db.Timestamptz(6)
  deactivated Boolean     @default(false)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model user_permission {
  user_id       String      @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at    DateTime    @default(now()) @db.Timestamptz(6)
  permission_id Permissions
  user          user        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([user_id, permission_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model role {
  id         String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime     @default(now()) @db.Timestamptz(6)
  name       String?
  user_roles user_roles[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model user_roles {
  created_at DateTime @default(now()) @db.Timestamptz(6)
  user_id    String   @db.Uuid
  role_id    String   @db.Uuid
  role       role     @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([user_id, role_id])
}

enum PermitType {
  VACATION
  SICKNESS
  PERMISSION
}

enum PermitStatus {
  PENDING
  REJECTED
  APPROVED
}

enum Role {
  Super_Admin @map("Super Admin")
  Admin
  Key_Client  @map("Key Client")
  Manager
  Employee
}

enum ProjectStatus {
  ACTIVE
  PLANNED
  PAUSED
  COMPLETED
}

enum SeniorityLevel {
  junior
  middle
  senior
}

enum SkillCategory {
  hard
  soft
}

enum contractstatus {
  active
  not_active @map("not-active")
}

enum contracttype {
  permanent
  fixed_term @map("fixed-term")
}

enum remotepolicy {
  hybrid
  full_remote @map("full-remote")
  on_site     @map("on-site")
}

enum workinghours {
  full_time @map("full-time")
  part_time @map("part-time")
}

enum work_item_status {
  active
  completed
  on_hold   @map("on-hold")
}

enum work_item_type {
  time_material @map("time-material")
  fixed_price   @map("fixed-price")
}

enum ClientStatus {
  active
  inactive
}

enum Permissions {
  CAN_CREATE_CLIENT
  CAN_EDIT_CLIENT
  CAN_CREATE_WORK_ITEM
  CAN_EDIT_WORK_ITEM
  CAN_EDIT_WORKING_DAY
  CAN_APPROVE_PERMIT
  CAN_CREATE_PROJECT
  CAN_EDIT_PROJECT
  CAN_SEE_OTHERS_TIMESHEET
  CAN_ALLOCATE_RESOURCE
  CAN_CREATE_USER
  CAN_EDIT_USER
  CAN_SEE_CLIENT
  CAN_SEE_WORK_ITEM
  CAN_SEE_PERMISSIONS
  CAN_DEAL_PERMISSIONS
}
